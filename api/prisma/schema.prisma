generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Store {
    id          String              @id @default(uuid())
    name        String
    website     String?
    description String?
    image       String?
    bannerImage String?
    isPublished Boolean             @default(false)
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
    userStores  UserStoreRelation[]
    products    Product[]

    @@map("stores")
}

model Product {
    id          String   @id @default(uuid())
    storeId     String
    name        String
    description String?
    image       String?
    isPublished Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    items       Item[]
    store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

    @@map("products")
}

model ItemType {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    items       Item[]

    @@map("item_types")
}

model Item {
    id                  String   @id @default(uuid())
    productId           String
    itemTypeId          Int
    name                String
    description         String?
    image               String?
    maxQuantityPerOrder Int
    isPublished         Boolean  @default(false)
    config              Json
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    itemType            ItemType @relation(fields: [itemTypeId], references: [id])

    @@map("items")
}

model Superuser {
    id        String   @id @default(uuid())
    email     String   @unique
    name      String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("superusers")
}

model User {
    id                String              @id @default(uuid())
    email             String              @unique
    name              String
    password          String
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    UserStoreRelation UserStoreRelation[]

    @@map("users")
}

model Role {
    id             Int                 @id @default(autoincrement())
    name           String
    description    String?
    storeRelations UserStoreRelation[]

    @@map("roles")
}

model UserStoreRelation {
    id      String @id @default(uuid())
    userId  String
    storeId String
    roleId  Int
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
    role    Role   @relation(fields: [roleId], references: [id])

    @@unique([userId, storeId])
    @@map("user_store_relations")
}
